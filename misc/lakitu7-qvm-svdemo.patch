Index: src/game/g_syscalls.asm
===================================================================
--- src/game/g_syscalls.asm	(revision 114)
+++ src/game/g_syscalls.asm	(working copy)
@@ -50,6 +50,7 @@
 equ trap_Parse_SourceFileAndLine    -47
 
 equ trap_SendGameStat               -48
+equ trap_DemoCommand                -49
 
 
 equ memset                          -101
Index: src/game/g_syscalls.c
===================================================================
--- src/game/g_syscalls.c	(revision 114)
+++ src/game/g_syscalls.c	(working copy)
@@ -257,6 +257,12 @@
   return;
 }
 
+void trap_DemoCommand( demoCommand_t cmd, const char *string )
+{
+  syscall( G_DEMO_COMMAND, cmd, string );
+  return;
+}
+
 int trap_Parse_AddGlobalDefine( char *define )
 {
   return syscall( G_PARSE_ADD_GLOBAL_DEFINE, define );
Index: src/game/g_local.h
===================================================================
--- src/game/g_local.h	(revision 114)
+++ src/game/g_local.h	(working copy)
@@ -408,6 +408,7 @@
   char                guid[ 33 ];
   char                ip[ 16 ];
   qboolean            muted;
+  qboolean            demoClient;
   qboolean            denyBuild;
   int                 adminLevel;
   char                adminName[ MAX_NETNAME ];
@@ -561,6 +562,15 @@
   qboolean  crouch;
 } damageRegion_t;
 
+// demo commands
+typedef enum
+{
+    DC_SERVER_COMMAND = -1,
+    DC_CLIENT_SET = 0,
+    DC_CLIENT_REMOVE,
+    DC_SET_STAGE
+} demoCommand_t;
+
 #define MAX_ARMOUR_TEXT    8192
 #define MAX_ARMOUR_REGIONS 16
 
@@ -758,7 +768,9 @@
   int               lastTeamUnbalancedTime;
   int               numTeamWarnings;  
   int               lastMsgTime;
-  
+
+  demoState_t       demoState;
+
   statsCounters_level alienStatsCounters;
   statsCounters_level humanStatsCounters;
 } level_locals_t;
@@ -1080,6 +1092,7 @@
 void CheckVote( void );
 void CheckTeamVote( int teamnum );
 void LogExit( const char *string );
+void G_DemoCommand( demoCommand_t cmd, const char *string );
 int  G_TimeTilSuddenDeath( void );
 void CheckMsgTimer( void );
 qboolean G_Flood_Limited( gentity_t *ent );
@@ -1411,3 +1424,4 @@
 
 void      trap_SnapVector( float *v );
 void      trap_SendGameStat( const char *data );
+void      trap_DemoCommand( demoCommand_t cmd, const char *string );
Index: src/game/g_active.c
===================================================================
--- src/game/g_active.c	(revision 114)
+++ src/game/g_active.c	(working copy)
@@ -404,7 +404,7 @@
     if ( client->sess.spectatorClient >= 0 )
     {
       cl = &level.clients[ client->sess.spectatorClient ];
-      if ( cl->sess.sessionTeam != TEAM_SPECTATOR )
+      if ( cl->sess.sessionTeam != TEAM_SPECTATOR || cl->pers.demoClient )
         doPmove = qfalse;
     }
   }
@@ -1847,7 +1847,7 @@
     {
       cl = &level.clients[ clientNum ];
 
-      if( cl->pers.connected == CON_CONNECTED )
+      if( cl->pers.connected == CON_CONNECTED || cl->pers.demoClient )
       {
  
     if( cl -> sess.spectatorState != SPECTATOR_FOLLOW ) 
Index: src/game/g_session.c
===================================================================
--- src/game/g_session.c	(revision 114)
+++ src/game/g_session.c	(working copy)
@@ -164,4 +164,9 @@
     if( level.clients[ i ].pers.connected == CON_CONNECTED )
       G_WriteClientSessionData( &level.clients[ i ] );
   }
+
+  // write values for sv_maxclients and sv_democlients because they invalidate session data
+  trap_Cvar_Set( "session", va( "%i %i", 
+                 trap_Cvar_VariableIntegerValue( "sv_maxclients" ),
+                 trap_Cvar_VariableIntegerValue( "sv_democlients" ) ) );
 }
Index: src/game/g_public.h
===================================================================
--- src/game/g_public.h	(revision 114)
+++ src/game/g_public.h	(working copy)
@@ -222,7 +222,8 @@
   G_PARSE_READ_TOKEN,
   G_PARSE_SOURCE_FILE_AND_LINE,
 
-  G_SEND_GAMESTAT
+  G_SEND_GAMESTAT,
+  G_DEMO_COMMAND
 } gameImport_t;
 
 
@@ -253,10 +254,12 @@
 
   GAME_RUN_FRAME,         // ( int levelTime );
 
-  GAME_CONSOLE_COMMAND      // ( void );
+  GAME_CONSOLE_COMMAND,      // ( void );
   // ConsoleCommand will be called when a command has been issued
   // that is not recognized as a builtin function.
   // The game can issue trap_argc() / trap_argv() commands to get the command
   // and parameters.  Return qfalse if the game doesn't recognize it as a command.
+
+  GAME_DEMO_COMMAND         // ( int cmd, const char *string );
 } gameExport_t;
 
Index: src/game/g_main.c
===================================================================
--- src/game/g_main.c	(revision 114)
+++ src/game/g_main.c	(working copy)
@@ -62,6 +62,7 @@
 vmCvar_t  g_speed;
 vmCvar_t  g_gravity;
 vmCvar_t  g_cheats;
+vmCvar_t  g_demoState;
 vmCvar_t  g_knockback;
 vmCvar_t  g_quadfactor;
 vmCvar_t  g_inactivity;
@@ -188,6 +189,9 @@
   // don't override the cheat state set by the system
   { &g_cheats, "sv_cheats", "", 0, 0, qfalse },
 
+  // demo state
+  { &g_demoState, "sv_demoState", "", 0, 0, qfalse },
+
   // noset vars
   { NULL, "gamename", GAME_VERSION , CVAR_SERVERINFO | CVAR_ROM, 0, qfalse  },
   { NULL, "gamedate", __DATE__ , CVAR_ROM, 0, qfalse  },
@@ -357,6 +361,9 @@
 void G_RunFrame( int levelTime );
 void G_ShutdownGame( int restart );
 void CheckExitRules( void );
+void G_DemoSetClient( void );
+void G_DemoRemoveClient( void );
+void G_DemoSetStage( void );
 
 void G_CountSpawns( void );
 void G_CalculateBuildPoints( void );
@@ -412,6 +419,22 @@
 
     case GAME_CONSOLE_COMMAND:
       return ConsoleCommand( );
+
+    case GAME_DEMO_COMMAND:
+      switch ( arg0 )
+      {
+      case DC_CLIENT_SET:
+        G_DemoSetClient( );
+        break;
+      case DC_CLIENT_REMOVE:
+        G_DemoRemoveClient( );
+        break;
+      case DC_SET_STAGE:
+        G_DemoSetStage( );
+        break;
+
+      }
+      return 0;
   }
 
   return -1;
@@ -612,6 +635,8 @@
 void G_InitGame( int levelTime, int randomSeed, int restart )
 {
   int i;
+  char buffer[ MAX_CVAR_VALUE_STRING ];
+  int a, b;
 
   srand( randomSeed );
 
@@ -631,6 +656,11 @@
   level.startTime = levelTime;
   level.alienStage2Time = level.alienStage3Time =
     level.humanStage2Time = level.humanStage3Time = level.startTime;
+  trap_Cvar_VariableStringBuffer( "session", buffer, sizeof( buffer ) );
+  sscanf( buffer, "%i %i", &a, &b );
+  if ( a != trap_Cvar_VariableIntegerValue( "sv_maxclients" ) ||
+       b != trap_Cvar_VariableIntegerValue( "sv_democlients" ) )
+    level.newSession = qtrue;
 
   level.snd_fry = G_SoundIndex( "sound/misc/fry.wav" ); // FIXME standing in lava / slime
 
@@ -1366,6 +1396,8 @@
   float         humanPlayerCountMod     = level.averageNumHumanClients / PLAYER_COUNT_MOD;
   static int    lastAlienStageModCount  = 1;
   static int    lastHumanStageModCount  = 1;
+  static int    lastAlienStage  = -1;
+  static int    lastHumanStage  = -1;
 
   if( alienPlayerCountMod < 0.1f )
     alienPlayerCountMod = 0.1f;
@@ -1435,6 +1467,15 @@
 
     lastHumanStageModCount = g_humanStage.modificationCount;
   }
+
+  if ( level.demoState == DS_RECORDING &&
+       ( trap_Cvar_VariableIntegerValue( "g_alienStage" ) != lastAlienStage ||
+         trap_Cvar_VariableIntegerValue( "g_humanStage" ) != lastHumanStage ) )
+  {
+    lastAlienStage = trap_Cvar_VariableIntegerValue( "g_alienStage" );
+    lastHumanStage = trap_Cvar_VariableIntegerValue( "g_humanStage" );
+    G_DemoCommand( DC_SET_STAGE, va( "%d %d", lastHumanStage, lastAlienStage ) );
+  }
 }
 
 /*
@@ -1502,13 +1543,15 @@
   for( i = 0; i < level.maxclients; i++ )
   {
     P[ i ] = '-';
-    if ( level.clients[ i ].pers.connected != CON_DISCONNECTED )
+    if ( level.clients[ i ].pers.connected != CON_DISCONNECTED ||
+         level.clients[ i ].pers.demoClient )
     {
       level.sortedClients[ level.numConnectedClients ] = i;
       level.numConnectedClients++;
       P[ i ] = (char)'0' + level.clients[ i ].pers.teamSelection;
 
-      if( level.clients[ i ].pers.connected != CON_CONNECTED )
+      if( level.clients[ i ].pers.connected != CON_CONNECTED &&
+         !level.clients[ i ].pers.demoClient )
         continue;
 
       level.numVotingClients++;
@@ -1559,8 +1602,85 @@
     SendScoreboardMessageToAllClients( );
 }
 
+/*
+============
+G_DemoCommand
 
+Store a demo command to a demo if we are recording
+============
+*/
+void G_DemoCommand( demoCommand_t cmd, const char *string )
+{
+  if( level.demoState == DS_RECORDING )
+    trap_DemoCommand( cmd, string );
+}
+
 /*
+============
+G_DemoSetClient
+
+Mark a client as a demo client and load info into it
+============
+*/
+void G_DemoSetClient( void )
+{
+  char buffer[ MAX_INFO_STRING ];
+  gclient_t *client;
+  char *s;
+
+  trap_Argv( 0, buffer, sizeof( buffer ) );
+  client = level.clients + atoi( buffer );
+  client->pers.demoClient = qtrue;
+
+  trap_Argv( 1, buffer, sizeof( buffer ) );
+  s = Info_ValueForKey( buffer, "name" );
+  if( *s )
+    Q_strncpyz( client->pers.netname, s, sizeof( client->pers.netname ) );
+  s = Info_ValueForKey( buffer, "ip" );
+  if( *s )
+    Q_strncpyz( client->pers.ip, s, sizeof( client->pers.ip ) );
+  s = Info_ValueForKey( buffer, "team" );
+  if( *s )
+    client->pers.teamSelection = atoi( s );
+  client->sess.spectatorState = SPECTATOR_NOT;
+}
+
+/*
+============
+G_DemoRemoveClient
+
+Unmark a client as a demo client
+============
+*/
+void G_DemoRemoveClient( void )
+{
+  char buffer[ 3 ];
+  gclient_t *client;
+
+  trap_Argv( 0, buffer, sizeof( buffer ) );
+  client = level.clients + atoi( buffer );
+  client->pers.demoClient = qfalse;
+}
+
+/*
+============
+G_DemoSetStage
+
+Set the stages in a demo
+============
+*/
+void G_DemoSetStage( void )
+{
+  char buffer[ 2 ];
+
+  trap_Argv( 0, buffer, sizeof( buffer ) );
+  trap_Cvar_Set( "g_humanStage", buffer );
+  trap_Argv( 1, buffer, sizeof( buffer ) );
+  trap_Cvar_Set( "g_alienStage", buffer );
+}
+
+
+/*
 ========================================================================
 
 MAP CHANGING
@@ -2172,6 +2292,10 @@
 */
 void CheckExitRules( void )
 {
+  // don't exit in demos
+  if( level.demoState == DS_PLAYBACK )
+    return;
+
   // if at the intermission, wait for all non-bots to
   // signal ready, then go to next level
   if( level.intermissiontime )
@@ -2514,6 +2638,54 @@
 }
 
 /*
+==================
+CheckDemo
+==================
+*/
+void CheckDemo( void )
+{
+  int i;
+
+  // Don't do anything if no change
+  if ( g_demoState.integer == level.demoState )
+    return;
+
+  // log all connected clients
+  if ( g_demoState.integer == DS_RECORDING )
+  {
+    char buffer[ MAX_INFO_STRING ] = "";
+    for ( i = 0; i < level.maxclients; i++ )
+    {
+      if ( level.clients[ i ].pers.connected == CON_CONNECTED )
+      {
+        Info_SetValueForKey( buffer, "name", level.clients[ i ].pers.netname );
+        Info_SetValueForKey( buffer, "ip", level.clients[ i ].pers.ip );
+        Info_SetValueForKey( buffer, "team", va( "%d", level.clients[ i ].pers.teamSelection ) );
+        G_DemoCommand( DC_CLIENT_SET, va( "%d %s", i, buffer ) );
+      }
+    }
+  }
+
+  // empty teams and display a message, also cancel all teamvotes
+  else if ( g_demoState.integer == DS_PLAYBACK )
+  {
+    trap_SendServerCommand( -1, "print \"A demo has been started on the server.\n\"" );
+    level.teamVoteNo[ 0 ] = level.numConnectedClients;
+    level.teamVoteYes[ 0 ] = 0;
+    CheckTeamVote( PTE_HUMANS );
+    level.teamVoteNo[ 1 ] = level.numConnectedClients;
+    level.teamVoteYes[ 1 ] = 0;
+    CheckTeamVote( PTE_ALIENS );
+    for ( i = 0; i < level.maxclients; i++ )
+    {
+      if ( level.clients[ i ].pers.teamSelection != PTE_NONE )
+        G_ChangeTeam( g_entities + i, PTE_NONE );
+    }
+  }
+  level.demoState = g_demoState.integer;
+}
+
+/*
 =============
 G_RunThink
 
@@ -2606,13 +2778,16 @@
   // get any cvar changes
   G_UpdateCvars( );
 
+  // check demo state
+  CheckDemo( );
+
   //
   // go through all allocated objects
   //
   start = trap_Milliseconds( );
   ent = &g_entities[ 0 ];
 
-  for( i = 0; i < level.num_entities; i++, ent++ )
+  for( i = 0; i < ( level.demoState == DS_PLAYBACK ? g_maxclients.integer : level.num_entities ); i++, ent++ )
   {
     if( !ent->inuse )
       continue;
Index: src/game/g_admin.c
===================================================================
--- src/game/g_admin.c	(revision 114)
+++ src/game/g_admin.c	(working copy)
@@ -2481,6 +2481,11 @@
   }
   if( vic->client->pers.teamSelection == teamnum )
     return qfalse;
+  if( level.demoState == DS_PLAYBACK )
+  {
+    ADMP( "^3!putteam: ^7cannot join a team while a demo is playing\n" );
+    return qfalse;
+  }
   G_ChangeTeam( vic, teamnum );
 
   AP( va( "print \"^3!putteam: ^7%s^7 put %s^7 on to the %s team\n\"",
@@ -3908,6 +3913,7 @@
   char oldname[ MAX_NAME_LENGTH ];
   char err[ MAX_STRING_CHARS ];
   char userinfo[ MAX_INFO_STRING ];
+  char buf[ MAX_INFO_STRING ];
   char *s;
   gentity_t *victim = NULL;
 
@@ -3950,6 +3956,9 @@
         oldname,
         level.clients[ pids[ 0 ] ].pers.netname,
         ( ent ) ? G_admin_adminPrintName( ent ) : "console" ) );
+  // log renames to demo
+  Info_SetValueForKey( buf, "name", newname );
+  G_DemoCommand( DC_CLIENT_SET, va( "%d %s", (int)(victim - g_entities), buf ) );
   return qtrue;
 }
 
Index: src/game/g_utils.c
===================================================================
--- src/game/g_utils.c	(revision 114)
+++ src/game/g_utils.c	(working copy)
@@ -168,6 +168,8 @@
         trap_SendServerCommand( i, cmd );
     }
   }
+
+  G_DemoCommand( DC_SERVER_COMMAND, cmd );
 }
 
 
Index: src/game/g_client.c
===================================================================
--- src/game/g_client.c	(revision 114)
+++ src/game/g_client.c	(working copy)
@@ -998,6 +998,7 @@
   char      c1[ MAX_INFO_STRING ];
   char      c2[ MAX_INFO_STRING ];
   char      userinfo[ MAX_INFO_STRING ];
+  char      buf[ MAX_INFO_STRING ];
   team_t    team;
 
   ent = g_entities + clientNum;
@@ -1091,6 +1092,9 @@
       {
         client->pers.nameChangeTime = level.time;
         client->pers.nameChanges++;
+        // log renames to demo
+        Info_SetValueForKey( buf, "name", client->pers.netname );
+        G_DemoCommand( DC_CLIENT_SET, va( "%d %s", clientNum, buf ) );
       }
     }
   }
@@ -1403,6 +1407,7 @@
   gentity_t *ent;
   gclient_t *client;
   int       flags;
+  char      buffer[ MAX_INFO_STRING ] = "";
 
   ent = g_entities + clientNum;
 
@@ -1445,6 +1450,12 @@
 
   G_LogPrintf( "ClientBegin: %i\n", clientNum );
 
+  // log to demo
+  Info_SetValueForKey( buffer, "name", client->pers.netname );
+  Info_SetValueForKey( buffer, "ip", client->pers.ip );
+  Info_SetValueForKey( buffer, "team", va( "%d", client->pers.teamSelection ) );
+  G_DemoCommand( DC_CLIENT_SET, va( "%d %s", clientNum, buffer ) );
+
   if( g_clientUpgradeNotice.integer )
   {
     if( !Q_stricmp( ent->client->pers.guid, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) )
@@ -1851,5 +1862,7 @@
 
   trap_SetConfigstring( CS_PLAYERS + clientNum, "");
 
+  G_DemoCommand( DC_CLIENT_REMOVE, va( "%d", clientNum ) );
+
   CalculateRanks( );
 }
Index: src/game/g_cmds.c
===================================================================
--- src/game/g_cmds.c	(revision 114)
+++ src/game/g_cmds.c	(working copy)
@@ -657,6 +657,7 @@
 {
   pTeam_t oldTeam = ent->client->pers.teamSelection;
   qboolean isFixingImbalance=qfalse;
+  char    buf[ MAX_INFO_STRING ];
  
   if( oldTeam == newTeam )
     return;
@@ -742,6 +743,10 @@
   //update ClientInfo
   ClientUserinfoChanged( ent->client->ps.clientNum );
   G_CheckDBProtection( );
+
+  // log team changes to demo
+  Info_SetValueForKey( buf, "team", va( "%d", ent->client->pers.teamSelection ) );
+  G_DemoCommand( DC_CLIENT_SET, va( "%d %s", (int)(ent - g_entities), buf ) );
 }
 
 /*
@@ -796,6 +801,12 @@
   
   if( !Q_stricmp( s, "spectate" ) )
     team = PTE_NONE;
+  else if( level.demoState == DS_PLAYBACK )
+  {
+    trap_SendServerCommand( ent-g_entities, "print \"You cannot join a team "
+      "while a demo is being played\n\"" );
+    return;
+  }
   else if( !force && ent->client->pers.teamSelection == PTE_NONE &&
            g_maxGameClients.integer && level.numPlayingClients >=
            g_maxGameClients.integer )
@@ -1045,6 +1056,7 @@
       Com_sprintf( name, sizeof( name ), "%s%s%c%c"EC": ", prefix,
                    ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE );
       color = COLOR_GREEN;
+      G_DemoCommand( DC_SERVER_COMMAND, va( "chat \"%s^2%s\"", name, chatText ) );
       break;
 
     case SAY_TEAM:
@@ -1060,6 +1072,7 @@
         color = COLOR_YELLOW;
       else
         color = COLOR_CYAN;
+      G_DemoCommand( DC_SERVER_COMMAND, va( "tchat \"%s^%c%s\"", name, color, chatText ) );
       break;
 
     case SAY_TELL:
@@ -1078,6 +1091,7 @@
       Com_sprintf( name, sizeof( name ), "^2%s^7%s%s%c%c"EC" ", g_actionPrefix.string, prefix,
                    ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE );
       color = COLOR_WHITE;
+      G_DemoCommand( DC_SERVER_COMMAND, va( "chat \"%s%s\"", name, chatText ) );
       break;
 
     case SAY_ACTION_T:
@@ -1089,6 +1103,7 @@
         Com_sprintf( name, sizeof( name ), EC"^5%s^7%s%c%c"EC""EC" ", g_actionPrefix.string, 
           ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE );
       color = COLOR_WHITE;
+      G_DemoCommand( DC_SERVER_COMMAND, va( "tchat \"%s%s\"", name, chatText ) );
       break;
       
       case SAY_ADMINS:
@@ -3697,11 +3712,13 @@
       continue;
 
     // can only follow connected clients
-    if( level.clients[ clientnum ].pers.connected != CON_CONNECTED )
+    if( level.clients[ clientnum ].pers.connected != CON_CONNECTED &&
+        !level.clients[ clientnum ].pers.demoClient )
       continue;
 
     // can't follow another spectator
-     if( level.clients[ clientnum ].pers.teamSelection == PTE_NONE )
+     if( level.clients[ clientnum ].pers.teamSelection == PTE_NONE &&
+        !level.clients[ clientnum ].pers.demoClient )
        continue;
      
       // can only follow teammates when dead and on a team
